/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CollateralFacetInterface extends ethers.utils.Interface {
  functions: {
    "collateralBalance(uint256)": FunctionFragment;
    "collateralInfo(uint256)": FunctionFragment;
    "collaterals()": FunctionFragment;
    "decreaseAndDestroy(uint256,uint256)": FunctionFragment;
    "decreaseStake(uint256,uint256)": FunctionFragment;
    "getCollateralInfo()": FunctionFragment;
    "increaseStake(uint256,uint256)": FunctionFragment;
    "setCollateralEyeShapeSvgId(address,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAndDestroy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralEyeShapeSvgId",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAndDestroy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralEyeShapeSvgId",
    data: BytesLike
  ): Result;

  events: {
    "DecreaseStake(uint256,uint256)": EventFragment;
    "ExperienceTransfer(uint256,uint256,uint256)": EventFragment;
    "IncreaseStake(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreaseStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExperienceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseStake"): EventFragment;
}

export type DecreaseStakeEvent = TypedEvent<
  [BigNumber, BigNumber] & { _tokenId: BigNumber; _reduceAmount: BigNumber }
>;

export type ExperienceTransferEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _fromTokenId: BigNumber;
    _toTokenId: BigNumber;
    experience: BigNumber;
  }
>;

export type IncreaseStakeEvent = TypedEvent<
  [BigNumber, BigNumber] & { _tokenId: BigNumber; _stakeAmount: BigNumber }
>;

export class CollateralFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CollateralFacetInterface;

  functions: {
    collateralBalance(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        collateralType_: string;
        escrow_: string;
        balance_: BigNumber;
      }
    >;

    collateralInfo(
      _collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        }
      ] & {
        collateralInfo_: [
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        };
      }
    >;

    collaterals(
      overrides?: CallOverrides
    ): Promise<[string[]] & { collateralTypes_: string[] }>;

    decreaseAndDestroy(
      _tokenId: BigNumberish,
      _toId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseStake(
      _tokenId: BigNumberish,
      _reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        })[]
      ] & {
        collateralInfo_: ([
          string,
          [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          }
        ] & {
          collateralType: string;
          collateralTypeInfo: [
            [number, number, number, number, number, number],
            string,
            string,
            string,
            number,
            number,
            number,
            boolean
          ] & {
            modifiers: [number, number, number, number, number, number];
            primaryColor: string;
            secondaryColor: string;
            cheekColor: string;
            svgId: number;
            eyeShapeSvgId: number;
            conversionRate: number;
            delisted: boolean;
          };
        })[];
      }
    >;

    increaseStake(
      _tokenId: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralEyeShapeSvgId(
      _collateralToken: string,
      _svgId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collateralBalance(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      collateralType_: string;
      escrow_: string;
      balance_: BigNumber;
    }
  >;

  collateralInfo(
    _collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      }
    ] & {
      collateralType: string;
      collateralTypeInfo: [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      };
    }
  >;

  collaterals(overrides?: CallOverrides): Promise<string[]>;

  decreaseAndDestroy(
    _tokenId: BigNumberish,
    _toId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseStake(
    _tokenId: BigNumberish,
    _reduceAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralInfo(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      }
    ] & {
      collateralType: string;
      collateralTypeInfo: [
        [number, number, number, number, number, number],
        string,
        string,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        modifiers: [number, number, number, number, number, number];
        primaryColor: string;
        secondaryColor: string;
        cheekColor: string;
        svgId: number;
        eyeShapeSvgId: number;
        conversionRate: number;
        delisted: boolean;
      };
    })[]
  >;

  increaseStake(
    _tokenId: BigNumberish,
    _stakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralEyeShapeSvgId(
    _collateralToken: string,
    _svgId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralBalance(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        collateralType_: string;
        escrow_: string;
        balance_: BigNumber;
      }
    >;

    collateralInfo(
      _collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [
          [number, number, number, number, number, number],
          string,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          modifiers: [number, number, number, number, number, number];
          primaryColor: string;
          secondaryColor: string;
          cheekColor: string;
          svgId: number;
          eyeShapeSvgId: number;
          conversionRate: number;
          delisted: boolean;
        }
      ] & {
        collateralType: string;
        collateralTypeInfo: [
          [number, number, number, number, number, number],
          string,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          modifiers: [number, number, number, number, number, number];
          primaryColor: string;
          secondaryColor: string;
          cheekColor: string;
          svgId: number;
          eyeShapeSvgId: number;
          conversionRate: number;
          delisted: boolean;
        };
      }
    >;

    collaterals(overrides?: CallOverrides): Promise<string[]>;

    decreaseAndDestroy(
      _tokenId: BigNumberish,
      _toId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseStake(
      _tokenId: BigNumberish,
      _reduceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralInfo(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        [
          [number, number, number, number, number, number],
          string,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          modifiers: [number, number, number, number, number, number];
          primaryColor: string;
          secondaryColor: string;
          cheekColor: string;
          svgId: number;
          eyeShapeSvgId: number;
          conversionRate: number;
          delisted: boolean;
        }
      ] & {
        collateralType: string;
        collateralTypeInfo: [
          [number, number, number, number, number, number],
          string,
          string,
          string,
          number,
          number,
          number,
          boolean
        ] & {
          modifiers: [number, number, number, number, number, number];
          primaryColor: string;
          secondaryColor: string;
          cheekColor: string;
          svgId: number;
          eyeShapeSvgId: number;
          conversionRate: number;
          delisted: boolean;
        };
      })[]
    >;

    increaseStake(
      _tokenId: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralEyeShapeSvgId(
      _collateralToken: string,
      _svgId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreaseStake(uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      _reduceAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _reduceAmount: BigNumber }
    >;

    DecreaseStake(
      _tokenId?: BigNumberish | null,
      _reduceAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _reduceAmount: BigNumber }
    >;

    "ExperienceTransfer(uint256,uint256,uint256)"(
      _fromTokenId?: BigNumberish | null,
      _toTokenId?: BigNumberish | null,
      experience?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber; experience: BigNumber }
    >;

    ExperienceTransfer(
      _fromTokenId?: BigNumberish | null,
      _toTokenId?: BigNumberish | null,
      experience?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber; experience: BigNumber }
    >;

    "IncreaseStake(uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      _stakeAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _stakeAmount: BigNumber }
    >;

    IncreaseStake(
      _tokenId?: BigNumberish | null,
      _stakeAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _stakeAmount: BigNumber }
    >;
  };

  estimateGas: {
    collateralBalance(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralInfo(
      _collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collaterals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAndDestroy(
      _tokenId: BigNumberish,
      _toId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseStake(
      _tokenId: BigNumberish,
      _reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralInfo(overrides?: CallOverrides): Promise<BigNumber>;

    increaseStake(
      _tokenId: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralEyeShapeSvgId(
      _collateralToken: string,
      _svgId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralBalance(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralInfo(
      _collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collaterals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAndDestroy(
      _tokenId: BigNumberish,
      _toId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseStake(
      _tokenId: BigNumberish,
      _reduceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseStake(
      _tokenId: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralEyeShapeSvgId(
      _collateralToken: string,
      _svgId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
