/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ItemsFacetInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "balanceOfToken(address,uint256,uint256)": FunctionFragment;
    "equipWearables(uint256,uint16[16])": FunctionFragment;
    "equippedWearables(uint256)": FunctionFragment;
    "findWearableSets(uint256[])": FunctionFragment;
    "getItemType(uint256)": FunctionFragment;
    "getItemTypes(uint256[])": FunctionFragment;
    "getWearableSet(uint256)": FunctionFragment;
    "getWearableSets()": FunctionFragment;
    "itemBalances(address)": FunctionFragment;
    "itemBalancesOfToken(address,uint256)": FunctionFragment;
    "itemBalancesOfTokenWithTypes(address,uint256)": FunctionFragment;
    "itemBalancesWithTypes(address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setWearableSlotPositions(uint256,bool[16])": FunctionFragment;
    "totalWearableSets()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "useConsumables(uint256,uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipWearables",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "equippedWearables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findWearableSets",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemTypes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesOfToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesOfTokenWithTypes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesWithTypes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWearableSlotPositions",
    values: [
      BigNumberish,
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "useConsumables",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equipWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equippedWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesOfTokenWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWearableSlotPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useConsumables",
    data: BytesLike
  ): Result;

  events: {
    "EquipWearables(uint256,uint16[16],uint16[16])": EventFragment;
    "TransferToParent(address,uint256,uint256,uint256)": EventFragment;
    "UseConsumables(uint256,uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EquipWearables"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToParent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseConsumables"): EventFragment;
}

export type EquipWearablesEvent = TypedEvent<
  [
    BigNumber,
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ],
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  ] & {
    _tokenId: BigNumber;
    _oldWearables: [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ];
    _newWearables: [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ];
  }
>;

export type TransferToParentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _toContract: string;
    _toTokenId: BigNumber;
    _tokenTypeId: BigNumber;
    _value: BigNumber;
  }
>;

export type UseConsumablesEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]] & {
    _tokenId: BigNumber;
    _itemIds: BigNumber[];
    _quantities: BigNumber[];
  }
>;

export class ItemsFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ItemsFacetInterface;

  functions: {
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    balanceOfBatch(
      _owners: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { bals: BigNumber[] }>;

    balanceOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    equipWearables(
      _tokenId: BigNumberish,
      _equippedWearables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    equippedWearables(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ] & {
        wearableIds_: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
      }
    >;

    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { wearableSetIds_: BigNumber[] }>;

    getItemType(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ] & {
        itemType_: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      }
    >;

    getItemTypes(
      _itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        })[]
      ] & {
        itemTypes_: ([
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        })[];
      }
    >;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        }
      ] & {
        wearableSet_: [
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        };
      }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        })[]
      ] & {
        wearableSets_: ([
          string,
          number[],
          number[],
          [number, number, number, number, number]
        ] & {
          name: string;
          allowedCollaterals: number[];
          wearableIds: number[];
          traitsBonuses: [number, number, number, number, number];
        })[];
      }
    >;

    itemBalances(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
      ] & {
        bals_: ([BigNumber, BigNumber] & {
          itemId: BigNumber;
          balance: BigNumber;
        })[];
      }
    >;

    itemBalancesOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
      ] & {
        bals_: ([BigNumber, BigNumber] & {
          itemId: BigNumber;
          balance: BigNumber;
        })[];
      }
    >;

    itemBalancesOfTokenWithTypes(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[]
      ] & {
        itemBalancesOfTokenWithTypes_: ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[];
      }
    >;

    itemBalancesWithTypes(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[]
      ] & {
        output_: ([
          BigNumber,
          BigNumber,
          [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          }
        ] & {
          balance: BigNumber;
          itemId: BigNumber;
          itemType: [
            string,
            string,
            string,
            [number, number, number, number, number, number],
            [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ],
            number[],
            [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            number,
            boolean,
            number,
            boolean,
            number,
            number,
            number
          ] & {
            name: string;
            description: string;
            author: string;
            traitModifiers: [number, number, number, number, number, number];
            slotPositions: [
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean,
              boolean
            ];
            allowedCollaterals: number[];
            dimensions: [number, number, number, number] & {
              x: number;
              y: number;
              width: number;
              height: number;
            };
            ghstPrice: BigNumber;
            maxQuantity: BigNumber;
            totalQuantity: BigNumber;
            svgId: number;
            rarityScoreModifier: number;
            canPurchaseWithGhst: boolean;
            minLevel: number;
            canBeTransferred: boolean;
            category: number;
            kinshipBonus: number;
            experienceBonus: number;
          };
        })[];
      }
    >;

    setBaseURI(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    useConsumables(
      _tokenId: BigNumberish,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _owner: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    _owners: string[],
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balanceOfToken(
    _tokenContract: string,
    _tokenId: BigNumberish,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  equipWearables(
    _tokenId: BigNumberish,
    _equippedWearables: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  equippedWearables(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  findWearableSets(
    _wearableIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getItemType(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    }
  >;

  getItemTypes(
    _itemIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      [number, number, number, number, number, number],
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      number[],
      [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      number,
      boolean,
      number,
      number,
      number
    ] & {
      name: string;
      description: string;
      author: string;
      traitModifiers: [number, number, number, number, number, number];
      slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ];
      allowedCollaterals: number[];
      dimensions: [number, number, number, number] & {
        x: number;
        y: number;
        width: number;
        height: number;
      };
      ghstPrice: BigNumber;
      maxQuantity: BigNumber;
      totalQuantity: BigNumber;
      svgId: number;
      rarityScoreModifier: number;
      canPurchaseWithGhst: boolean;
      minLevel: number;
      canBeTransferred: boolean;
      category: number;
      kinshipBonus: number;
      experienceBonus: number;
    })[]
  >;

  getWearableSet(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    }
  >;

  getWearableSets(
    overrides?: CallOverrides
  ): Promise<
    ([string, number[], number[], [number, number, number, number, number]] & {
      name: string;
      allowedCollaterals: number[];
      wearableIds: number[];
      traitsBonuses: [number, number, number, number, number];
    })[]
  >;

  itemBalances(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
  >;

  itemBalancesOfToken(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
  >;

  itemBalancesOfTokenWithTypes(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      [
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      }
    ] & {
      balance: BigNumber;
      itemId: BigNumber;
      itemType: [
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      };
    })[]
  >;

  itemBalancesWithTypes(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      [
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      }
    ] & {
      balance: BigNumber;
      itemId: BigNumber;
      itemType: [
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      };
    })[]
  >;

  setBaseURI(
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWearableSlotPositions(
    _wearableId: BigNumberish,
    _slotPositions: [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  useConsumables(
    _tokenId: BigNumberish,
    _itemIds: BigNumberish[],
    _quantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balanceOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipWearables(
      _tokenId: BigNumberish,
      _equippedWearables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    equippedWearables(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getItemType(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      }
    >;

    getItemTypes(
      _itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        [number, number, number, number, number, number],
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ],
        number[],
        [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        number,
        boolean,
        number,
        number,
        number
      ] & {
        name: string;
        description: string;
        author: string;
        traitModifiers: [number, number, number, number, number, number];
        slotPositions: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
        allowedCollaterals: number[];
        dimensions: [number, number, number, number] & {
          x: number;
          y: number;
          width: number;
          height: number;
        };
        ghstPrice: BigNumber;
        maxQuantity: BigNumber;
        totalQuantity: BigNumber;
        svgId: number;
        rarityScoreModifier: number;
        canPurchaseWithGhst: boolean;
        minLevel: number;
        canBeTransferred: boolean;
        category: number;
        kinshipBonus: number;
        experienceBonus: number;
      })[]
    >;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number[], number[], [number, number, number, number, number]] & {
        name: string;
        allowedCollaterals: number[];
        wearableIds: number[];
        traitsBonuses: [number, number, number, number, number];
      }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        number[],
        number[],
        [number, number, number, number, number]
      ] & {
        name: string;
        allowedCollaterals: number[];
        wearableIds: number[];
        traitsBonuses: [number, number, number, number, number];
      })[]
    >;

    itemBalances(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
    >;

    itemBalancesOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { itemId: BigNumber; balance: BigNumber })[]
    >;

    itemBalancesOfTokenWithTypes(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ] & {
        balance: BigNumber;
        itemId: BigNumber;
        itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      })[]
    >;

    itemBalancesWithTypes(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        }
      ] & {
        balance: BigNumber;
        itemId: BigNumber;
        itemType: [
          string,
          string,
          string,
          [number, number, number, number, number, number],
          [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ],
          number[],
          [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          number,
          boolean,
          number,
          number,
          number
        ] & {
          name: string;
          description: string;
          author: string;
          traitModifiers: [number, number, number, number, number, number];
          slotPositions: [
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean,
            boolean
          ];
          allowedCollaterals: number[];
          dimensions: [number, number, number, number] & {
            x: number;
            y: number;
            width: number;
            height: number;
          };
          ghstPrice: BigNumber;
          maxQuantity: BigNumber;
          totalQuantity: BigNumber;
          svgId: number;
          rarityScoreModifier: number;
          canPurchaseWithGhst: boolean;
          minLevel: number;
          canBeTransferred: boolean;
          category: number;
          kinshipBonus: number;
          experienceBonus: number;
        };
      })[]
    >;

    setBaseURI(_value: string, overrides?: CallOverrides): Promise<void>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    useConsumables(
      _tokenId: BigNumberish,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EquipWearables(uint256,uint16[16],uint16[16])"(
      _tokenId?: BigNumberish | null,
      _oldWearables?: null,
      _newWearables?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ],
      {
        _tokenId: BigNumber;
        _oldWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        _newWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
      }
    >;

    EquipWearables(
      _tokenId?: BigNumberish | null,
      _oldWearables?: null,
      _newWearables?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ],
      {
        _tokenId: BigNumber;
        _oldWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        _newWearables: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
      }
    >;

    "TransferToParent(address,uint256,uint256,uint256)"(
      _toContract?: string | null,
      _toTokenId?: BigNumberish | null,
      _tokenTypeId?: BigNumberish | null,
      _value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _toContract: string;
        _toTokenId: BigNumber;
        _tokenTypeId: BigNumber;
        _value: BigNumber;
      }
    >;

    TransferToParent(
      _toContract?: string | null,
      _toTokenId?: BigNumberish | null,
      _tokenTypeId?: BigNumberish | null,
      _value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _toContract: string;
        _toTokenId: BigNumber;
        _tokenTypeId: BigNumber;
        _value: BigNumber;
      }
    >;

    "UseConsumables(uint256,uint256[],uint256[])"(
      _tokenId?: BigNumberish | null,
      _itemIds?: null,
      _quantities?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      { _tokenId: BigNumber; _itemIds: BigNumber[]; _quantities: BigNumber[] }
    >;

    UseConsumables(
      _tokenId?: BigNumberish | null,
      _itemIds?: null,
      _quantities?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      { _tokenId: BigNumber; _itemIds: BigNumber[]; _quantities: BigNumber[] }
    >;
  };

  estimateGas: {
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipWearables(
      _tokenId: BigNumberish,
      _equippedWearables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    equippedWearables(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemType(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemTypes(
      _itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    itemBalances(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesOfTokenWithTypes(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesWithTypes(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    useConsumables(
      _tokenId: BigNumberish,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      _owners: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equipWearables(
      _tokenId: BigNumberish,
      _equippedWearables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    equippedWearables(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findWearableSets(
      _wearableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemType(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemTypes(
      _itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSet(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemBalances(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesOfToken(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesOfTokenWithTypes(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesWithTypes(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWearableSlotPositions(
      _wearableId: BigNumberish,
      _slotPositions: [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useConsumables(
      _tokenId: BigNumberish,
      _itemIds: BigNumberish[],
      _quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
