/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VrfFacetInterface extends ethers.utils.Interface {
  functions: {
    "changeVrf(uint256,bytes32,address,address)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "link()": FunctionFragment;
    "linkBalance()": FunctionFragment;
    "openPortals(uint256[])": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "removeLinkTokens(address,uint256)": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeVrf",
    values: [BigNumberish, BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPortals",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "changeVrf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPortals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;

  events: {
    "OpenPortals(uint256[])": EventFragment;
    "PortalOpened(uint256)": EventFragment;
    "VrfRandomNumber(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpenPortals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PortalOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VrfRandomNumber"): EventFragment;
}

export type OpenPortalsEvent = TypedEvent<
  [BigNumber[]] & { _tokenIds: BigNumber[] }
>;

export type PortalOpenedEvent = TypedEvent<
  [BigNumber] & { tokenId: BigNumber }
>;

export type VrfRandomNumberEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    randomNumber: BigNumber;
    _vrfTimeSet: BigNumber;
  }
>;

export class VrfFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VrfFacetInterface;

  functions: {
    changeVrf(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    link(overrides?: CallOverrides): Promise<[string]>;

    linkBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    openPortals(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;
  };

  changeVrf(
    _newFee: BigNumberish,
    _keyHash: BytesLike,
    _vrfCoordinator: string,
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  link(overrides?: CallOverrides): Promise<string>;

  linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  openPortals(
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomness(
    _requestId: BytesLike,
    _randomNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLinkTokens(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeVrf(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    link(overrides?: CallOverrides): Promise<string>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    openPortals(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OpenPortals(uint256[])"(
      _tokenIds?: null
    ): TypedEventFilter<[BigNumber[]], { _tokenIds: BigNumber[] }>;

    OpenPortals(
      _tokenIds?: null
    ): TypedEventFilter<[BigNumber[]], { _tokenIds: BigNumber[] }>;

    "PortalOpened(uint256)"(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    PortalOpened(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "VrfRandomNumber(uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      randomNumber?: null,
      _vrfTimeSet?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; randomNumber: BigNumber; _vrfTimeSet: BigNumber }
    >;

    VrfRandomNumber(
      tokenId?: BigNumberish | null,
      randomNumber?: null,
      _vrfTimeSet?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; randomNumber: BigNumber; _vrfTimeSet: BigNumber }
    >;
  };

  estimateGas: {
    changeVrf(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    link(overrides?: CallOverrides): Promise<BigNumber>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    openPortals(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeVrf(
      _newFee: BigNumberish,
      _keyHash: BytesLike,
      _vrfCoordinator: string,
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPortals(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkTokens(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
